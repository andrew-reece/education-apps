{"files":[{"id":"0b750d32-00a0-4db0-810c-9cf76df20c14","name":"Code","type":"server_js","source":"//####################################################################################################\n//####################################################################################################\n\n/* \n   Scripting app for Psych2500: Proseminar in Social Psychology\n   Created: Fall 2013\n   Author: Andrew Reece (TF)\n   Contact: reece@g.harvard.edu\n*/\n\n//####################################################################################################\n//####################################################################################################\n\n\n\n\n//                    ENTER COURSE-SPECIFIC VALUES IN THIS FUNCTION \n\n//                     [Function Name: initializeCourseVariables()]\n\n//####################################################################################################\n//####################################################################################################\n\n// name: initializeCourseVariables()\n// purpose: assigns course/user-specific variables for locating folders, spreadsheets, etc\n//          since everything must be a function in Google Scripts, this is where a user hard codes their folder/file ids \u0026 paths\n//          [we may be able to set these vars via Google Forms for a more generic, user-friendly interface]\n// input: none\n// output: Array(String a, String b, ..., String n)\n\n\nfunction initializeCourseVariables() {\n\n/////////////\n//  FOLDERS\n///////////// \n  \n  //   \n  // Enter folder name: root folder name for entire course on Google Drive\n  //\n  var root \u003d \"Psych 2500/\"\n  \n  //   \n  // Enter folder name: Administrative root directory (Admin; must be subfolder of root)\n  //  \n  var admin_root \u003d root + \"Admin/\"\n\n  //   \n  // Enter folder name: students upload assignments here (Student)\n  //  \n  var paper_submission_folder \u003d \"Weekly Comments\"\n\n  //   \n  // Enter folder name: students\u0027 completed assignments are kept here (Admin; if applicable)\n  //  \n  var admin_papers_storage_folder \u003d \"_Comments/\"\n\n  //   \n  // Enter folder name: exams are kept here (Admin)\n  //  \n  \n  var admin_exams \u003d \"_Exams/\"\n  \n  //   \n  // Enter folder name: master grading spreadsheets are kept here (Admin)\n  //  \n  var admin_grading \u003d admin_root + \"_Grading/\"\n\n  //\n  // Enter folder PATH: containing uploaded assignments from students\n  // eg. \"CourseName/Students/Uploads\"\n  //\n  var folder_student_uploads \u003d root + paper_submission_folder\n  \n  //\n  // Enter folder PATH: master/admin folder where student papers are stored\n  // eg. \"CourseName/Admin/Records\"\n  //\n  var folder_admin_papers \u003d admin_root + admin_papers_storage_folder\n  \n  // Nov 4 2013 - something has gone screwy with the folder paths, not sure why\n  //              so for now, we are switching to hard-coding folder ID refs\n  var ID_folder_admin_papers \u003d \"0By1RU2ey21bfbHJOVjRITHJzNXM\"\n  //\n  // Enter folder PATH: exams live here\n  // eg. \"CourseName/Admin/Exams\"\n  //  \n  var folder_admin_exams \u003d admin_root + admin_exams\n  \n  \n  \n/////////////\n//   FILES\n/////////////  \n  \n  //   \n  // Enter file ID: email template for 1-week-before reminders to faculty \n  // (Google Spreadsheet; contains email elements)\n  //\n  var sheet_reminder_email \u003d \"0Ai1RU2ey21bfdFFuZFhrRHJzTHd5dHBVTFhWa0cxWFE\"\n  \n  //   \n  // Enter file ID: email template for faculty when they receive student assignments \n  // (Google Spreadsheet; lists class date, faculty name per class, faculty email)\n  //  \n  var sheet_sendpapers_email \u003d \"0Ai1RU2ey21bfdGd5UUltcUtzc1FGSmFqWWFxYzV4aVE\"\n  \n  //   \n  // Enter file ID: course scheduling info \n  // (Google Spreadsheet; lists class date, faculty name per class, faculty email)\n  //  \n  var sheet_class_schedule \u003d \"0AkYlsx9j8KGqdHNLdXUtMGJaazMwOUQtMGRyQ0VSYmc\"\n  \n  //   \n  // Enter file ID: syllabus \n  // (PDF; entire course syllabus)\n  //    \n  var pdf_syllabus \u003d \"0B0Ylsx9j8KGqcnNuTG40YW9BZUk\"\n  \n  //   \n  // Enter file NAME: master grading sheet for weekly comments \n  // (Google Spreadsheet)\n  //    \n  var sheet_comment_grades \u003d \"_Comments Master\"\n  \n  //   \n  // Enter file NAME: master URL list for graded/feedbacked weekly comments \n  // (Google Spreadsheet)\n  //     \n  var sheet_doc_urls \u003d \"_Documents Master\"\n  \n  //   \n  // Enter file NAME: exam 1\n  // (Google Spreadsheet)\n  //     \n  var doc_exam1 \u003d \"1YQWDc-1hDvW88aRDuPhZSM7FrTNKrgRSO15TN4ms7uc\"\n  \n  \n  //\n  // for demo only - remove when done\n  //\n  //var sheet_class_schedule \u003d \"0Ai1RU2ey21bfdGtfX0NQMV9ZN2R2LWFudUF2SWFia3c\"\n  //var sheet_comment_grades \u003d \"_Comments Master DEMO\"\n  //var sheet_doc_urls \u003d \"_Documents Master DEMO\"\n  \n   \n  \n/////////////\n//   MISC\n/////////////  \n    \n  //\n  // Enter time (24:00 format) for when papers are due each week\n  //       (this is so the daemon knows when to run)\n  //\n  var deadline \u003d new Array()\n  deadline[0] \u003d 17   // enter hour\n  deadline[1] \u003d 15   // enter minute\n  \n  //\n  // Enter the opening string of the document title format for submitted assignments\n  //       eg. for format \u0027MyCourse.SurnameFirstname.Date.docx\u0027, enter \u0027MyCourse\u0027\n  //       (for regex)\n  //\n  var title_head \u003d \"Psych2500\\.\"\n  \n  var student_name_list \u003d \"Bercovitz,Cao,Coombs,Dillon,Fernandes,Hammond,Insel,Jing,Lee,Levari,Ngnoumen,Sezer,Was\"\n  \n  \n// return dictionary of all variables set here\n  \n  return {\u0027admin exams\u0027: folder_admin_exams, \n          \u0027admin papers\u0027:folder_admin_papers,  \n          \u0027admin papers ID\u0027:ID_folder_admin_papers,\n          \u0027admin papers subfolder\u0027: admin_papers_storage_folder, \n          \u0027admin root\u0027: admin_root, \n          \u0027comment grade sheet\u0027: sheet_comment_grades, \n          \u0027deadline\u0027: deadline, \n          \u0027doc title head\u0027: title_head,\n          \u0027doc url sheet\u0027: sheet_doc_urls, \n          \u0027email - send files to faculty\u0027: sheet_sendpapers_email, \n          \u0027email - 1 week reminder\u0027: sheet_reminder_email, \n          \u0027exam1\u0027:doc_exam1, \n          \u0027grading\u0027: admin_grading, \n          \u0027paper submission folder\u0027: paper_submission_folder, \n          \u0027root\u0027: root, \n          \u0027schedule\u0027: sheet_class_schedule, \n          \u0027student list\u0027: student_name_list,\n          \u0027student papers\u0027: folder_student_uploads, \n          \u0027syllabus\u0027: pdf_syllabus}\n\n         \n}\n\n//####################################################################################################\n//####################################################################################################\n\n\n\n\n\n\n//                  SPECIFY TIME-TRIGGERS IN THIS NEXT FUNCTION \n\n//                     [Function Name: createTimeTrigger()]\n\n//####################################################################################################\n//####################################################################################################\n\n// name: createTimeTrigger()\n// purpose: \n//          \n// input: none\n// output: none (but starts daemon)\n//\n// from: https://developers.google.com/apps-script/managing_triggers_programmatically\n\n// NB: Google only guarantees that scripts will run within a 15 minute window of the time you specify.\n//     In particular, if you definitely don\u0027t want a script to run before a certain time, set it to run at least 15 min after that time \n\nfunction createTimeTrigger() {\n  \n  // runs sendWeeklyComments - grabs student assignments and sends to faculty\n  // activates at 17:20 every Sunday\n   var everySunday \u003d ScriptApp.newTrigger(\"sendWeeklyComments\")\n   .timeBased()\n   .onWeekDay(ScriptApp.WeekDay.SUNDAY)\n   .atHour(17)\n   .nearMinute(20)\n   .everyWeeks(1)\n   .create();\n    \n  // runs returnComments - grabs graded papers from my inbox, scrapes grades, returns to students\n  // activates at 11:45 every Monday\n   var everyMonday \u003d ScriptApp.newTrigger(\"returnComments\")\n   .timeBased()\n   .onWeekDay(ScriptApp.WeekDay.MONDAY)\n   .atHour(11)\n   .nearMinute(45)\n   .everyWeeks(1)\n   .create();\n  \n  // runs sendReminderToFaculty - emails faculty member each week with a reminder about teaching\n  //      (this function only really makes sense for a course where there are multiple instructors alternating throughout the semester\n  // activates at 9:30 every Monday\n    var remindFaculty \u003d ScriptApp.newTrigger(\"sendReminderToFaculty\")\n   .timeBased()\n   .onWeekDay(ScriptApp.WeekDay.MONDAY)\n   .atHour(11)\n   .nearMinute(30)\n   .everyWeeks(1)\n   .create();\n}\n\n//####################################################################################################\n//####################################################################################################\n\n\n\n\n\n\n//           DON\u0027T MESS WITH THE REST OF THESE FUNCTIONS UNLESS YOU KNOW WHAT YOU\u0027RE DOING\n\n//                         [functions are listed alphabetically from here on]\n\n\n//####################################################################################################\n//####################################################################################################\n\n// name: adjustCommentsMaster(surname, grade, data)\n// purpose: 1) find student name, class date\n//          2) enter the grade scraped from comment paper into the master spreadsheet for comment grades\n//          3) grade then propagates from the master spreadsheet to students\u0027 private individual spreadsheets\n//\n// input:  String surname, String grade, String date\n// output: none\n\nfunction adjustCommentsMaster(data, date) {\n  \n    var vars \u003d initializeCourseVariables()\n    \n    // get file directory paths\n    var master_dir \u003d vars[\"grading\"]\n    var comments_master_sheet_name \u003d vars[\"comment grade sheet\"]\n    \n    // load actual Apps file objects so we can manipulate them\n    var comments_master_file \u003d DocsList.getFolder(master_dir).find(comments_master_sheet_name)[0]\n    var comments_master_sheet \u003d SpreadsheetApp.open(comments_master_file)\n    \n    // transpose the spreadsheet matrix so it\u0027s in a format we can use\n    var sheet_data \u003d arrayTranspose(comments_master_sheet.getDataRange().getValues())\n    \n    // surname-grade pairs are passed in as a 2D array\n    // we actually want them more like two columns side-by-side...so we transpose\n    //    (probably an easier way to do this)\n    var tdata \u003d arrayTranspose(data)\n    \n    // initialize empty array \n    var students_list \u003d new Array()\n    \n    // find the column we want to fill with grades\n    // the header cell in each column has a mm-dd date - so we just match against the date that was passed in\n    for (var j \u003d 0; j \u003c sheet_data.length; j++) {\n      if (sheet_data[j][0] \u003d\u003d date) {\n        var col \u003d j + 1\n        break\n      }\n    }\n    Logger.log(\u0027date: \u0027+date+\u0027 and col: \u0027+col)\n\n  // i don\u0027t remember why we need to make tdata[1] initialized into a new array.\n  var grades \u003d new Array(tdata[1])\n  Logger.log(grades)\n  Logger.log(\u0027url col: \u0027+col)\n  // update the grades values in the \u0027col\u0027 column of our spreadsheet \n  comments_master_sheet.getSheets()[0].getRange(2, col, tdata[0].length).setValues(arrayTranspose(grades))\n  \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: adjustDocsMaster(url, surname, date)\n// purpose: 1) find student name, class date\n//          2) enter the url linking to their graded comment paper into the master spreadsheet for graded papers\n//          3) url then propagates from the master spreadsheet to students\u0027 private individual spreadsheets\n//          \n// input:  String url, String surname, String date\n// output: none\n\n\nfunction adjustDocsMaster(data, date) {\n    \n    var vars \u003d initializeCourseVariables()\n\n    // get file directory paths    \n    var master_dir \u003d vars[\"grading\"]\n    var docs_master_sheet_name \u003d vars[\"doc url sheet\"]\n    \n    // load actual Apps file objects so we can manipulate them\n    var docs_master_file \u003d DocsList.getFolder(master_dir).find(docs_master_sheet_name)[0]\n    var docs_master_sheet \u003d SpreadsheetApp.open(docs_master_file)\n    \n    // transpose the spreadsheet matrix so it\u0027s in a format we can use\n    var sheet_data \u003d arrayTranspose(docs_master_sheet.getDataRange().getValues())\n    \n    // surname-grade pairs are passed in as a 2D array\n    // we actually want them more like two columns side-by-side...so we transpose\n    //    (probably an easier way to do this)    \n    var tdata \u003d arrayTranspose(data)\n    \n    var students_list \u003d new Array()\n    \n    var urls2d \u003d new Array(tdata[1])\n    \n    for (var j \u003d 0; j \u003c sheet_data.length; j++) {\n      if (sheet_data[j][0] \u003d\u003d date) {\n        var this_date \u003d sheet_data[j][0]\n        var col \u003d j+1 \n      }\n    }\n    for (var i \u003d 1; i \u003c sheet_data[0].length; i++) {\n      var student \u003d sheet_data[0][i]\n      \n      students_list.push(student)\n      \n    }\n\n  //Logger.log(\u0027tdata url: \u0027+tdata)\n  //Logger.log(\u0027url data0: \u0027+tdata[0])\n  //Logger.log(\u0027url data1: \u0027+tdata[1])\n  Logger.log(\u0027url col: \u0027+col)\n  docs_master_sheet.getSheets()[0].getRange(2, col, tdata[0].length).setValues(arrayTranspose(urls2d))\n  \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: arrayTranspose(data)\n// purpose: given a 2d Array, this function returns the transposed table\n//          from https://developers.google.com/apps-script/guides/sheets\n// input:  Array data\n// output: Array ret\n//         eg. arrayTranspose([[1,2,3],[4,5,6]]) returns [[1,4],[2,5],[3,6]]\n\nfunction arrayTranspose(data) {\n  if (data.length \u003d\u003d 0 || data[0].length \u003d\u003d 0) {\n    return null;\n  }\n\n  var ret \u003d [];\n  for (var i \u003d 0; i \u003c data[0].length; ++i) {\n    ret.push([]);\n  }\n\n  for (var i \u003d 0; i \u003c data.length; ++i) {\n    for (var j \u003d 0; j \u003c data[i].length; ++j) {\n      ret[j][i] \u003d data[i][j];\n    }\n  }\n\n  return ret;\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: escapeForRegex(s)\n// purpose: formats strings with appropriate escape characters for regex use\n//          from: http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n// input: String s\n// output: String s\n//         eg. Hello it\\\u0027s me. -\u003e Hello it\\\u0027s me\\.\n\n\nfunction escapeForRegex(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \u0027\\\\$\u0026\u0027)\n};\n\n//####################################################################################################\n//####################################################################################################\n\n// name: findTargetMessage(ms)\n// purpose: \n//          \n// input:  \n// output: \n//         eg. \n\nfunction findTargetMessage(ms, regex) {\n\n var target \u003d null\n \n for (var j \u003d 0; j \u003c ms.length; j++) {\n   \n  for (var k \u003d 0; k \u003c ms[j].length; k++) {\n     \n   var this_msg \u003d ms[j][k]\n     var from \u003d this_msg.getFrom()\n     Logger.log(\u0027looking for: \u0027+regex+ \u0027 and have: \u0027+from)\n     var match \u003d from.match(\"\u003c\"+regex+\"\u003e\")\n     if (match) {\n        Logger.log(\u0027found match\u0027+from)\n        var attached \u003d this_msg.getAttachments()  \n     }\n  }\n   \n   if (!!attached) { return attached; break; }\n }  \n\n return attached\n \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: formatDateString(str)\n// purpose: takes a standard Date object and chops off the time elements (mm:ss etc)\n//          see Date specs at: http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html\n// input: Date object\n// output: String date\n//         eg. Thu Mar 17 1980\n\nfunction formatDateString(str) {  \n  var dateArray \u003d String(str).split(\" \")\n  dateArray.length\u003d4 \n  date \u003d dateArray.join(\" \")\n  return date;\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: getAdminUploadFolder(path)\n// purpose: returns Google Drive folder object for depositing files\n// input: String id\n// output: Folder object\n\nfunction getAdminUploadFolder(path) {\n  //Logger.log(path)\n return DocsList.getFolder(path); // TF folder ID tag \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: getDateInfo(addend)\n// purpose: generates date data based on either today or tomorrow\u0027s date (addend\u003d0 for today, \u003d1 for tomorrow)\n//          (this function runs on sundays but needs monday date strings to effectively search spreadsheet)\n// input: Integer addend\n// output: Array(String verbose, String terse, RegExp regex)\n//         verbose   \u003d EEE MMM DD YYYY  | eg. Thu Mar 17 1980\n//         terse     \u003d MM-DD            | eg. 03-17\n//         regex     \u003d ^MM-DD.*         | eg. ^03-17.*\n\nfunction getDateInfo(addend) {\n  \n   var d \u003d new Date()\n   \n  // this program will run on Sunday night, and the spreadsheet with class dates have Monday dates\n  // so we need to tell it to search for a day one day ahead of the actual date when it runs\n  // hence getDate() + 1\n  d.setDate(d.getDate() + addend)\n  \n  // verbose form \n  var verbose \u003d d.toDateString()\n  \n  // TEST ONLY\n  \n  //verbose \u003d \u0027Mon Sep 30 2013\u0027\n  \n  // terse form\n  var day \u003d d.getDate()\n  var month \u003d d.getMonth() + 1\n  if (month \u003c 10) { month \u003d \u00270\u0027 + month } \n  if (day \u003c 10) { day \u003d \u00270\u0027 + day }\n  var terse \u003d month+\"-\"+day\n  \n  // TEST ONLY\n  //terse \u003d \u002709-30\u0027\n  \n  // regex (using terse)\n  var regex \u003d new RegExp(\"^\"+terse+\".*\")\n  \n  \n  return Array(verbose, terse, regex)\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: getEmailAttachments(msg)\n// purpose: \n//          \n// input:  \n// output: \n//         eg. \n\nfunction getEmailAttachments(msg) {\n  var attachments \u003d msg\n  //var attachments \u003d msg.getAttachments();\n  if (!!attachments) {\n    var is_zip \u003d (attachments[0].getContentType() \u003d\u003d \u0027application/zip\u0027) ? true : false\n  \n    if (is_zip) {\n      return Utilities.unzip(attachments[0])\n    } else {\n      return attachments \n    } \n  }\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: getEmailSinceYesterday(cutoff_time)\n// purpose: Access Gmail inbox of account running the script\n//          Return all messages received after Sunday 5pm\n//             \n// input: Integer hr, Integer min (24:00 format)\n// output: Message[]\n\nfunction getEmailSinceYesterday(hr, min) {\n \n // we want a \u0027yesterday\u0027 date to mark a cutoff for searching our inbox\n var yesterday \u003d new Date()\n yesterday.setDate(yesterday.getDate() - 1)\n yesterday.setHours(hr,min)\n \n // Grab all threads of Gmail inbox of the account running this script\n // Current account: dharmahound@gmail.com\n //         NB: g.harvard seems to have set restrictions on DriveApp methods\n //          ...the functions that use them here get bounced on my g.harvard acct.\n var total_threads \u003d GmailApp.getInboxThreads();\n  \n var targets \u003d new Array()\n \n var subject \u003d \"Psych2500: Students\u0027 Comments [PLEASE READ AND GRADE BEFORE CLASS]\"\n \n // loops through threads and excludes those dated before yesterday\u0027s paper submission cutoff\n // stores resulting messages in \u0027msgs\u0027 array\n for (var i \u003d 0; i \u003c total_threads.length; i++) {\n   \n   //test\n   Logger.log(total_threads[i].getFirstMessageSubject())\n   Logger.log(yesterday+ \u0027 and message date: \u0027+total_threads[i].getLastMessageDate())\n   if ((total_threads[i].getFirstMessageSubject() \u003d\u003d subject) \u0026\u0026 (total_threads[i].getLastMessageDate() \u003e\u003d yesterday)) {\n     // if most recent message in thread is from later than 5:15pm yesterday, add to our targets array\n     // 5:15 is when the \u0027sendWeeklyComments()\u0027 function runs on Sundays...this script runs on Monday morning\n     targets.push(total_threads[i].getMessages())\n     Logger.log(\u0027found a fitting email!\u0027)\n   }\n          \n } \n  \n return targets\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: getFacultyInfo(classdate, id)\n// purpose: get name, email for faculty scheduled to teach on a given date\n//          ie. accesses spreadsheet which holds columns: class date, faculty name, faculty email\n// input:  String classdate [eg. Thu Mar 17 1980], String class-schedule spreadsheet id\n// output: Array (name, email)\n\nfunction getFacultyInfo(classdate, id) {\n  \n  var faculty_list \u003d SpreadsheetApp.openById(id) \n  var data \u003d arrayTranspose(faculty_list.getDataRange().getValues())\n  var dates \u003d data[0]\n  var names \u003d data[1]\n  var emails \u003d data[2]\n  \n for(d in dates) {\n    var d_str \u003d formatDateString(dates[d])\n    if (d_str \u003d\u003d classdate) {\n      var this_date \u003d d_str\n      var this_name \u003d names[d]\n      var this_email \u003d emails[d]\n    }\n  }\n  \n  return Array(this_name, this_email)\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: getTargetFiles(root, date)\n// purpose: \n//          \n// input:  String root, String date\n// output: File[] \n//         eg. \n\nfunction getTargetFiles(root, date) {\n  \n  var student_upload_folder \u003d DocsList.getFolder(root) // Weekly Comments folder ID tag\n  \n  // this gets the list of subfolders inside the parent uploads folder, ie. folders for each week \n  // naming convention: MM/DD [Faculty Surname] - [Listed Topic]\n  var upload_subfolders \u003d student_upload_folder.getFolders();\n  \n  // iterate through weekly folder names\n for (var i \u003d 0; i \u003c upload_subfolders.length; i++) {\n    \n    var fname \u003d upload_subfolders[i].getName();\n   \n    var date_regex \u003d new RegExp(\"^\"+date+\".*\")\n    \n    // search folder names for one that has our target date\n    if (date_regex.exec(fname)) {\n      \n      // when we have a match (there should be only one), get all of the files from that folder\n      // these are the students\u0027 individual comment docs\n      var target_dir \u003d upload_subfolders[i]\n      break;\n    }\n  }\n  \n  return target_dir.getFiles();\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: navigateXmlDir(file, path)\n// purpose: We want to scrape .docx files.  But those are actually zipped XML libraries!  \n//          This function unzips and finds the root XML doc with all the document text\n//          \n// input:  File docx_file, String directory_path\n// output: File xml_root_file\n//         eg. navigateXMLDir(File reece.docx, String \u0027My2500/papers/\u0027)\n//             -\u003e reece.xml\n\nfunction navigateXmlDir(file, path) {\n  \n  // specifically direct Apps to treat this file as .zip\n  file.setContentType(\u0027application/zip\u0027)\n  \n  // \n  var this_file \u003d path.createFile(file)\n  var fid \u003d this_file.getId()\n      \n  // unzips word doc [who knew word docs are zip files?]\n  var this_doc \u003d Utilities.unzip(DocsList.getFileById(fid))\n  var target \u003d null\n      \n  // goes through folder/file directory unzipped from .docx packet\n  for (var x \u003d 0; x \u003c this_doc.length; x++) {\n     if (!!this_doc[x]) {\n        if (this_doc[x].getName() \u003d\u003d \u0027word/document.xml\u0027) { target \u003d this_doc[x]; break; }\n     }      \n  } \n  \n  this_file.setTrashed(true)\n  \n  return target\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: returnComments()\n// purpose: 1) checks Gmail inbox for messages from this week\u0027s faculty (sent after submission date)\n//          2) grabs attachments from most recent email\n//          3) opens each individual document, scans for student name and grade\n//          4) enters grade into master grade sheet (which then copies over into students\u0027 private sheets)\n//          5) puts link to graded paper document in master sheet (copies into students\u0027 private sheets)\n// input:  none\n// output: none\n\n\nfunction returnComments() {\n  \n // get course specific variables (folder/spreadsheet ids)\n var local_vars \u003d initializeCourseVariables()\n var master_folder \u003d local_vars[\u0027admin papers\u0027]\n var student_uploads \u003d local_vars[\u0027student papers\u0027]\n var course_schedule \u003d local_vars[\u0027schedule\u0027]\n var submission_deadline \u003d local_vars[\u0027deadline\u0027]\n var doc_title_head \u003d local_vars[\u0027doc title head\u0027]\n var student_list \u003d local_vars[\u0027student list\u0027]\n \n // get date info in verbose, regex, and terse form (see getDateInfo() help for more)\n var date_info \u003d getDateInfo(0)\n var date_verbose \u003d date_info[0]\n var date_mm_dd  \u003d date_info[1]\n var date_regex \u003d date_info[2]\n \n var faculty_data \u003d getFacultyInfo(date_verbose, course_schedule)\n var faculty_name \u003d faculty_data[0]\n var faculty_email \u003d faculty_data[1] \n var regex_email \u003d escapeForRegex(faculty_email)\n \n if (!(faculty_name \u003d\u003d \"NOCLASS\")) {\n   \n   var submit_hr \u003d submission_deadline[0]\n   var submit_min \u003d submission_deadline[1]\n   \n   var msgs \u003d getEmailSinceYesterday(submit_hr, submit_min)\n   \n   var target_msg \u003d findTargetMessage(msgs, regex_email)          \n   \n   var files \u003d getEmailAttachments(target_msg)\n   \n   // admin_folder_path is where we want students\u0027 zipped comments for the week to be stored on our Admin directory\n   // Directory naming convention: MM-DD-FacultySurname\n   var admin_folder_path \u003d master_folder+date_mm_dd+\"-\"+faculty_name\n   \n   // Folder object for master admin folder - where we upload a copy of graded papers\n   var admin_upload_folder \u003d getAdminUploadFolder(admin_folder_path); \n   \n   \n   var catch_errors \u003d new Array()\n   \n   var grade\n   var all_grades \u003d new Array()\n   \n   var surname\n   var all_surnames \u003d new Array()\n   \n   var all_doc_urls \u003d new Array()\n   \n   for (var k \u003d 0; k \u003c files.length; k++) {\n     \n     var fname \u003d files[k].getName()\n     var this_student \u003d student_list[k]\n     \n     if (fname.match(/\\.doc$/)) {\n       \n       var rawdata \u003d files[k].getDataAsString()\n       var is_xml \u003d false\n       \n       var doc_info \u003d uploadDocVersion(admin_upload_folder, files[k])\n       var doc_id \u003d doc_info[0]\n       var doc_url \u003d doc_info[1]\n       all_doc_urls.push(doc_url)\n       \n       if (!!rawdata) {\n         var scraped_data \u003d scrapeXmlDoc(rawdata, is_xml)\n         if (!!scraped_data[1]) { \n           surname \u003d scraped_data[1] \n         } else {\n           surname \u003d this_student+\"?\" \n           catch_errors.push(\"Name couldn\u0027t be scraped from doc!\")\n         }\n         all_surnames.push(surname)\n         \n         if (!!scraped_data[0]) { \n           grade \u003d scraped_data[0][1] \n           \n         } else { \n           grade \u003d \"?\"  \n           catch_errors.push(\"Grade not found for: \"+surname)\n\n         }\n         all_grades.push(grade)\n         \n         // test\n          Logger.log(\u0027Name: \u0027+surname+\u0027 and grade: \u0027+grade)\n       }\n       \n     } else if (fname.match(\"^\"+doc_title_head+\".*\\.docx\")) {\n       \n       var doc_info \u003d uploadDocVersion(admin_upload_folder, files[k])\n       var doc_id \u003d doc_info[0]\n       var doc_url \u003d doc_info[1]\n       all_doc_urls.push(doc_url)\n       var is_xml \u003d true\n       \n       var target_dir \u003d navigateXmlDir(files[k], admin_upload_folder)\n       \n       if (!!target_dir) {\n         \n         var scraped_data \u003d scrapeXmlDoc(target_dir, is_xml)\n         \n         if (!!scraped_data[1]) { \n           surname \u003d scraped_data[1] \n         } else {\n           surname \u003d \"?\" \n           catch_errors.push(\"\\nName couldn\u0027t be scraped from doc!\")\n         }\n         all_surnames.push(surname)\n         \n         if (!!scraped_data[0]) { \n           grade \u003d scraped_data[0][1] \n           \n         } else { \n           grade \u003d \"?\"\n           catch_errors.push(\"\\nGrade not found for: \"+surname)  \n         }\n         all_grades.push(grade)\n         \n         \n         // test\n          Logger.log(\u0027Name: \u0027+surname+\u0027 and grade: \u0027+grade)\n       } \n     }\n   }\n   \n   // if there were any exceptions caught in the doc scraping, send me an email alert listing them\n   if (catch_errors.length \u003e 0) { \n     \n      var reason \u003d \u0027ERRORS\u0027\n     \n      sendAlert(reason, catch_errors)\n     \n   }\n   \n   // mimics Python\u0027s zip() - mushes two arrays into a 2D array\n   // here we do this for surnames and grades/urls, respectively\n   var grade_data \u003d zip([all_surnames, all_grades])\n   var url_data \u003d zip([all_surnames, all_doc_urls])\n   \n   // 2D-array sort, from: http://stackoverflow.com/questions/6490343/sorting-2-dimensional-javascript-array\n   grade_data.sort(function(a, b) { return (a[0] \u003c b[0] ? -1 : (a[0] \u003e b[0] ? 1 : 0)); });\n   url_data.sort(function(a, b) { return (a[0] \u003c b[0] ? -1 : (a[0] \u003e b[0] ? 1 : 0)); });\n\n   \n   adjustCommentsMaster(grade_data, date_mm_dd)\n   adjustDocsMaster(url_data, date_mm_dd)\n   \n } else {    // for days with no class\n   \n    var reason \u003d \u0027NOCLASS\u0027\n   \n    // sends me an email stating that daemon ran and found no class this week\n    sendAlert(reason);\n\n }\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: scrapeXmlDoc(dir)\n// purpose: Reads text of the first node in an XML document - which, for unzipped .docx files, contains the entire text\n//          Searches for specific patterns that identify where grades and student names are entered\n//          Returns grade and surname\n//          \n// input:   Document dir (an XML document) ... or Blob dir (in the case that it\u0027s .doc and not .docx)\n// output:  String grade, String surname\n//         eg. take document mypaper.docx (unzipped)\n//             return Array(\u00272.5\u0027, \u0027Reece\u0027)\n\nfunction scrapeXmlDoc(dir, xml) {\n  \n  var grade\n  var surname\n  \n  if (xml) {\n   var nodes \u003d XmlService.parse(dir.getDataAsString()).getDescendants()\n        \n   var grade \u003d nodes[0].getValue().match(/grade in box below\\: *(([0-3]{1}\\.?[0-9]{0,2})|(\u003c?[AB]{1}[\\+\\-]?))/)\n   \n  if (!grade) {   \n     grade \u003d nodes[0].getValue().match(/Grade\\: *([0-3]{1}\\.?[0-9]{0,2})/)\n   }\n    \n   if (grade \u003d\u003d \u0027A\u0027) {\n     var grade \u003d 3\n   } else if (grade \u003d\u003d \u0027A-\u0027) {\n     var grade \u003d 2\n   } else if (grade \u003d\u003d \u0027B+\u0027) {\n     var grade \u003d 1\n   } else if (grade \u003d\u003d \u0027\u003cB+\u0027) {\n     var grade \u003d 0 \n   }\n    \n   var surname \u003d nodes[0].getValue().match(/Name\\: *[A-Z]?[a-z]*( [A-Z]{1}\\.?)? ([A-Z]?[a-z]*)\\t*/).pop()\n\n   return Array(grade, surname)\n   \n  } else {\n    \n   var grade \u003d dir.match(/(Feedback \\(optional\\)\\:\\t*([0-3]{1}\\.?[0-9]{0,2}))|(grade in box below\\: *([0-3]{1}\\.?[0-9]{0,2}))/)\n   if (!grade) {   \n     grade \u003d dir.match(/Grade\\: *([0-3]{1}\\.?[0-9]{0,2})/)\n   }\n   // test\n    Logger.log(\u0027grade match: \u0027+grade)   \n   var surname \u003d dir.match(/Name\\: *[A-Z]?[a-z]*( [A-Z]{1}\\.?)? ([A-Z]?[a-z]*)\\t*/)\n   if (!!surname) { surname \u003d surname.pop() } else { surname \u003d \u0027noname\u0027 }\n\n   // test\n   // Logger.log(\u0027surname: \u0027+surname)\n   return Array(grade, surname)\n  }\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: sendAlert(reason, data[optional])\n// purpose: Sends email alerts to admins\n//          \n// input:   String reason, Array data [optional]\n// output:  none (sends email)\n//         eg. reason \u003d \u0027ERRORS\u0027\n//             send email listing errors caught from a given function\n\n// NB: better just to have \u0027reason\u0027 var activate different spreadsheets containing the template data...\n\nfunction sendAlert(reason, data) {\n  \n  var to \u003d \u0027reece@g.harvard.edu\u0027\n  \n  var from \u003d \u0027Psych2500 Daemon\u0027\n  \n  var subject\n  var body\n  \n  if (reason \u003d\u003d \u0027NOCLASS\u0027) {\n    \n    subject \u003d \u0027No 2500 class this week\u0027\n    body \u003d \u0027That is all there is to discuss.  Thanks!\u0027\n    \n  } else if (reason \u003d\u003d \u0027ERRORS\u0027) {\n    \n    subject \u003d \u0027Errors in returnComments() found\u0027\n    body \u003d \u0027Hi, I just ran returnComments() for Psych2500.  Errors occurred.  This is what happened:\\n\\n\u0027+data\n  }\n  \n  \n  MailApp.sendEmail({\n    to: to,\n    from: from,\n    subject: subject,\n    htmlBody: body,  \n  });  \n  \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: sendFilesToFaculty(id, name, email, files)\n// purpose: send email to faculty with zipped files\n//          \n// input: String name, String email, Blob files\n// output: none (sends email)\n\nfunction sendFilesToFaculty(id, name, email, files) {\n \n  var parts \u003d SpreadsheetApp.openById(id) \n  var data \u003d arrayTranspose(parts.getDataRange().getValues())\n  \n  // email parameters:\n  var title \u003d data[0][1]\n  var from \u003d data[1][1]\n  var cc \u003d data[2][1]\n  var bcc \u003d data[3][1]\n  var greeting \u003d data[4][1] + \u0027 \u0027 + name // eg. \"Dear Professor\" + \" \" + \"Feynman\"\n  var body \u003d greeting + data[5][1]\n  \n\n\n \n // email address should be dynamically assigned to different faculty based on the date\n // have a separate spreadsheet with date/faculty name/email that we pull this data from\n MailApp.sendEmail({\n   to: email,\n   cc: cc,\n   bcc: bcc,\n   name: from,\n   subject: title,\n   htmlBody: body,  \n   attachments: files\n }); \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: sendReminderToFaculty(id, name, email)\n// purpose: send email reminder to faculty one week ahead of their scheduled teaching date\n//          \n// input: String name, String email\n// output: none (sends email)\n\nfunction sendReminderToFaculty() {\n \n  // NB: this function is set up only to send reminders 7 days in advance\n  // ...to tweak this, we\u0027d make \u0027days-in-advance\u0027 an argument\n  \n  // get date info in verbose, regex, and terse form (see getDateInfo() help for more)\n  var date_info \u003d getDateInfo(7)\n  var date_verbose \u003d date_info[0]\n  \n  // get course specific variables (folder/spreadsheet ids)\n  var local_vars \u003d initializeCourseVariables()\n  var course_schedule \u003d local_vars[\u0027schedule\u0027]\n  var email_template \u003d local_vars[\u0027email - 1 week reminder\u0027]\n  var syllabus \u003d local_vars[\u0027syllabus\u0027]\n\n  var faculty_data \u003d getFacultyInfo(date_verbose, course_schedule)\n  var faculty_name \u003d faculty_data[0]\n  var faculty_email \u003d faculty_data[1] \n    \n  // string formatting of date (to make email prettier)\n  var month_names \u003d [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n  var weekday_names \u003d [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n  var d \u003d new Date() \n  d.setDate(d.getDate() + 7)\n  var day_of_the_month \u003d d.getDate()\n  var day_of_the_week \u003d weekday_names[d.getDay()-1]\n  var month \u003d month_names[d.getMonth()]  \n\n  // initialize email vars\n  // (we do this in the case of \"NOCLASS\", for which these vars should be null)\n  var cc\n  var bcc\n  var attachment\n  var from\n  \n  if ((faculty_name \u003d\u003d \"NOCLASS\") || (!faculty_name)) {\n\n    var title \u003d \"No 2500 class next week\"\n    var body \u003d \"There\u0027s no class next week (\"+ day_of_the_week + \", \" + month + \" \" + day_of_the_month+\")\"\n   \n  } else {\n        \n    var email_content \u003d SpreadsheetApp.openById(email_template) \n    var data \u003d arrayTranspose(email_content.getDataRange().getValues())\n\n    // email parameters:\n    var title \u003d data[0][1]\n    var from \u003d data[1][1]\n    var cc \u003d data[2][1]\n    var bcc \u003d data[3][1]\n    var greeting \u003d data[4][1] + \u0027 \u0027 + faculty_name + \",\u003cbr /\u003e\u003cbr /\u003e\" // eg. \"Dear Professor\" + \" \" + \"Feynman, \u003cbr /\u003e\u003cbr /\u003e\"\n    var opening_line \u003d data[5][1] + day_of_the_week + \u0027, \u0027 + month + \u0027 \u0027 + day_of_the_month\n    var main_body \u003d data[6][1] \n    var body \u003d greeting + opening_line + main_body\n    var attachment \u003d DriveApp.getFileById(syllabus) \n    \n  }\n\n  MailApp.sendEmail({\n    to: faculty_email,\n    cc: cc,  // this goes to Mahzarin, be careful when you\u0027re testing!\n    bcc: bcc,\n    name: from,\n    subject: title,\n    htmlBody: body,  \n    attachments: attachment\n  }); \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: sendWeeklyComments()\n// purpose: 1) finds folder with target files\n//          2) zips files\n//          3) sends email with .zip attachment\n// input:  String classdate [eg. Thu Mar 17 1980], String id [eg. Google file id string]\n// output: Array (name, email)\n\nfunction sendWeeklyComments() {\n  \n  // get date info in verbose, regex, and terse form (see getDateInfo() help for more)\n  var date_info \u003d getDateInfo(1)\n  var date_verbose \u003d date_info[0]\n  var date_mm_dd  \u003d date_info[1]\n  var date_regex \u003d date_info[2]\n  \n  // get course specific variables (folder/spreadsheet ids)\n  var local_vars \u003d initializeCourseVariables()\n  var master_folder \u003d local_vars[\"admin papers\"]\n  var student_uploads \u003d local_vars[\"student papers\"]\n  var course_schedule \u003d local_vars[\"schedule\"]\n  var template \u003d local_vars[\"email - send files to faculty\"]\n  \n  var faculty_data \u003d getFacultyInfo(date_verbose, course_schedule)\n  var faculty_name \u003d faculty_data[0]\n  var faculty_email \u003d faculty_data[1]\n  \n  if (!(faculty_name \u003d\u003d \"NOCLASS\")) {\n    \n    var target_docs \u003d getTargetFiles(student_uploads, date_mm_dd)\n    \n    var admin_folder_path \u003d master_folder+date_mm_dd+\"-\"+faculty_name\n    \n    // zip all files together and dump in Admin directory subfolder for that week\u0027s assignments\n    var zipped_files \u003d getAdminUploadFolder(admin_folder_path).createFile(Utilities.zip(target_docs, \u0027Psych2500_\u0027+date_mm_dd+\u0027_ungraded.zip\u0027));\n\n    // send zipped files to faculty, along with grading instructions\n    sendFilesToFaculty(template, faculty_name, faculty_email, zipped_files)\n    \n    // we don\u0027t need to store the zip file, so trash it when done\n    zipped_files.setTrashed(true)\n    \n  } else {    // for days with no class\n    \n    // send an email saying there\u0027s no class to TF \n    // (put this in a function)\n     MailApp.sendEmail({\n       to: \u0027reece@g.harvard.edu\u0027,\n       subject: \u0027No class tomorrow [\u0027+ date_verbose + \u0027]. [ from sendComments() daemon ]\u0027,\n       htmlBody: \u0027There is no 2500 class tomorrow.  So no files were sent to faculty.\u0027,  \n     }); \n  }\n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: uploadDocVersion(dir, f)\n// purpose: \n//          \n// input:  \n// output: \n//         eg. \n\nfunction uploadDocVersion(dir, f) {\n  \n    var this_doc \u003d dir.createFile(f)\n    var doc_id \u003d this_doc.getId()\n    //var doc_name \u003d this_doc.getName()\n    //test\n    //Logger.log(DriveApp.Access)\n    //var doc_loc \u003d DriveApp.getFileById(\"0B0Ylsx9j8KGqTUFFLWRmMmFiZDY2LTI0ZDctNGJjMy05ZTE0LTBhOTZiMGM0OTRjYw\")\n    //var this_doc \u003d DriveApp.getFileById(doc_id)\n    //doc_loc.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);\n    var doc_url \u003d this_doc.getUrl()\n    \n    return Array(doc_id, doc_url) \n    \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// name: apparateExam(url, surname, date)\n// purpose: 1) find student name, class date\n//          2) enter the url linking to their graded comment paper into the master spreadsheet for graded papers\n//          3) url then propagates from the master spreadsheet to students\u0027 private individual spreadsheets\n//          \n// input:  String url, String surname, String date\n// output: none\n\n\nfunction apparateExam(url, surnames, date) {\n    \n    var master_dir \u003d vars[\"admin exams\"]\n    var exam1_id \u003d vars[\"exam1\"]\n    \n    var exam1 \u003d DriveApp.getFileById(exam1_id)\n    var exam1_url \u003d exam1.getUrl()\n    var docs_master_file \u003d DocsList.getFolder(master_dir).find(exam1)[0]\n    var docs_master_sheet \u003d SpreadsheetApp.open(exam1)\n    \n    var comments_master_sheet_name \u003d vars[\"comment grade sheet\"]\n    \n    var comments_master_file \u003d DocsList.getFolder(master_dir).find(comments_master_sheet_name)[0]\n    var comments_master_sheet \u003d SpreadsheetApp.open(comments_master_file)\n    var sheet_data \u003d arrayTranspose(comments_master_sheet.getDataRange().getValues())\n    var sheet_data \u003d arrayTranspose(docs_master_sheet.getDataRange().getValues())\n    \n    var students_list \u003d new Array()\n    \n    for (var j \u003d 0; j \u003c sheet_data.length; j++) {\n      if (sheet_data[j][0] \u003d\u003d date) {\n        var this_date \u003d sheet_data[j][0]\n        var col \u003d j+1 \n      }\n    }\n    for (var i \u003d 1; i \u003c sheet_data[0].length; i++) {\n      var student \u003d sheet_data[0][i]\n      \n      students_list.push(student)\n    }\n\n  urls2d \u003d new Array(urls)\n  docs_master_sheet.getSheets()[0].getRange(2, col, surnames.length).setValues(arrayTranspose(urls2d))\n  \n}\n\n//####################################################################################################\n//####################################################################################################\n\n// taken from: http://stackoverflow.com/questions/4856717/javascript-equivalent-of-pythons-zip-function\n\nfunction zip(arrays) {\n    return arrays[0].map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n\n//####################################################################################################\n//####################################################################################################\n\nfunction openExam3() {\n  \n    var exam \u003d DriveApp.getFileById(\"1kcYF5uYIM1Y-XSSEjq7rJuG41kIoJYoWdUnJ6xR3BbY\")\n    exam.addViewer(\u0027psych2500@googlegroups.com\u0027)\n    \n    var d \u003d new Date()\n    \n  MailApp.sendEmail({\n    to: \u0027psych2500@googlegroups.com\u0027,\n    from: \u0027Psych 2500 Mailer Daemon\u0027,\n    subject: \u0027Exam 3 is open now.\u0027,\n    htmlBody: \u0027Good morning 2500 folks, \u003cbr /\u003e\u003cbr /\u003eExam 3 is open now.  \u003cbr /\u003eYou should have received a separate email invitation to share the exam document.  \u003cbr /\u003eIf for some reason you do not have an invite, please let Andrew know right away.  Otherwise, good luck!  \u003cbr /\u003e\u003cbr /\u003eRemember to follow submission guidelines, as per the document posted to the Exam-related folder in Useful Documents.\u003cbr /\u003e\u003cbr /\u003eThanks,\u003cbr /\u003eYour friendly mailer daemon\u0027,  \n  });  \n  \n  MailApp.sendEmail({\n    to: \u0027reece@g.harvard.edu\u0027,\n    from: \u0027Psych 2500 Mailer Daemon\u0027,\n    subject: \u0027Exam 3 timestamp\u0027,\n    htmlBody: \u0027The exam was opened at timestamp: \u0027+d,  \n  });  \n}\n\n//####################################################################################################\n//####################################################################################################\n\nfunction collectExam3() {\n \n  /*\n  problem:\n  \n        each student has a private folder.  in this folder is a subfolder Exams.  \n        in this subfolder are subfolders Exam 1 and Exam 2 and Exam 3. in exam 3, there is a subfolder for each of the 8 questions students could choose to answer.\n        \n        students upload their completed exam responses separately for each question they complete, into the appropriate question folder.\n        faculty need to receive zip files with all students\u0027 responses for a given question.\n        \n        so, we need to:\n               1) collect responses from individual student folders\n               2) round up responses for each question in folders on the admin side of the shared drive\n               3) mail per-question sets of responses to the faculty members who wrote the questions (so they can grade them)\n  \n  what is hard coded:\n  \n        - a list of per-question folder names \n        - a list of faculty surnames\n        - directory paths to admin and student folder regions\n        \n  tasks at hand:\n  \n        1) get into students\u0027 My2500 folder, then iterate through folders there (each subfolder is for an individual student).  \n        2) go into each student folder, then go into subfolder Exams, then into subfolder Exam 3\n        3) now go into each of the folders in the list of folder names here \n           - each is for a faculty member and question number, eg. \u0027Heatherton 2\u0027\n        4) check if there\u0027s a file.  there should only be one file in any one given exam response folder per student\n        5) if there\u0027s a file, copy it, give it the same name as the original\n        6) deposit the copy into the admin exam folder of the same designation (eg. \u0027Heatherton 2\u0027)\n        7) this leaves us with all the student responses for each exam question listed together in their respective folders\n        8) zip all the files in each folder, send to the appropriate faculty email address \n           - use a form email that gives grading instructions, insert faculty name as appropriate\n  */\n  \n  // folder_dict will be an assoc. array for storing Folder objects, keyed by their names\n  var folder_dict \u003d new Object()\n  // these are the folder names for the folder_dict array (we\u0027ll use these elsewhere too)\n  var folders \u003d [\u0027Greene 1\u0027, \n                 \u0027Greene 2\u0027, \n                 \u0027Langer 1\u0027, \n                 \u0027Langer 2\u0027, \n                 \u0027Sidanius 1\u0027, \n                 \u0027Sidanius 2\u0027, \n                 \u0027Warneken 1\u0027, \n                 \u0027Warneken 2\u0027]\n  // array of faculty surnames for grabbing email addresses later on\n  var faculty \u003d [\u0027Langer\u0027, \u0027Greene\u0027, \u0027Warneken\u0027, \u0027Sidanius\u0027]\n  \n  // path to exam2 master folder, admin side\n  var PATH_admin_exams_folder \u003d \"_Exams/exam3/\"\n  // folder ID, in case path gets screwy\n  var ID_admin_exams_folder \u003d \"0By1RU2ey21bfMVRCbFJ6TUtQMHM\"\n  // path to students\u0027 master folder\n  var PATH_students_folder \u003d \u0027TF/Psych 2500/My 2500\u0027\n  \n  // test path to demo student folders (with dummy responses posted in exam2 area)\n  //var PATH_students_folder \u003d \u0027Admin/_Miscellaneous/_Demo Students/\u0027\n\n  // Folder object for admin exams\n  var admin_folder \u003d DocsList.getFolder(PATH_admin_exams_folder)\n\n  // assign assoc array key/val pairs\n  for (var i \u003d 0; i \u003c folders.length; i++) {\n    var this_folder \u003d folders[i]\n    folder_dict[this_folder] \u003d admin_folder.getFolders()[i]\n  }\n  \n  // Folder object for students area\n  var my2500 \u003d DocsList.getFolder(PATH_students_folder)\n  // Folder objects for each student\n  var students \u003d my2500.getFolders()\n  \n  // if there isn\u0027t a single exam response found, ct will be 0 and a warning gets logged\n  var ct \u003d 0\n  \n  // loop through each student\n  for (var i \u003d 0; i \u003c students.length; i++) {\n    \n    // log\n    //Logger.log(\u0027student: \u0027+students[i].getName())\n    \n    // Folder object for exams within a given student folder\n    var exams_folder \u003d students[i].getFolders()[0]\n    \n    // log\n    //Logger.log(exams_folder.getName())\n    \n    // error catching structures to ensure we\u0027re getting the folders we think we\u0027re getting\n    // probably unnecessary, but can\u0027t hurt\n    \n    if ((!exams_folder) || (exams_folder.getName() !\u003d \u0027Exams\u0027)) { \n      \n      Logger.log(\u0027Messed up main folder structure for: \u0027+students[i].getName()); \n      \n    } else {\n      \n      // Folder object for exam 3\n      var exam3_folder \u003d exams_folder.getFolders()[0]\n      \n      if ((!exam3_folder) || (exam3_folder.getName() !\u003d \u0027Exam 3\u0027)) { \n      \n        Logger.log(\u0027Messed up Exams folder structure for: \u0027+students[i].getName()); \n      \n      } else {\n        \n        // Folder objects for each question in Exam 2 (eg. Heatherton 1, Heatherton 2)\n        var choices \u003d exam3_folder.getFolders()\n        \n        // loop through each question folder\n        for (var j \u003d 0; j \u003c choices.length; j++) {\n          \n          // if there are files in a folder (there shouldn\u0027t ever be more than one), then copy and post to admin folder\n          \n          var responses \u003d choices[j].getFiles()\n          \n          if (responses.length \u003e 0) {\n            \n            // iterate \u0027# responses found\u0027 counter\n            ct++\n              \n            // log \n            Logger.log(\u0027Found a response! ...in: \u0027+students[i].getName())\n            \n            // get first file in array (there should be only one)\n            var response \u003d responses[0]\n            \n            // add to admin folder - stored in folder_dict assoc array\n            response.addToFolder(folder_dict[choices[j].getName()])\n\n          }\n        }\n      }\n    }\n  }\n  \n  // log error if no responses are found at all. \n  // (at actual runtime this definitely should not happen.)\n  if (ct \u003d\u003d 0) { Logger.log(\u0027No one has turned in an exam response yet.\u0027) }\n  \n  \n  // go through each pair of faculty folders\n  // zip each folder, label appropriately (eg. \u0027Heatherton_Q1\u0027)\n  // then zip folders together\n  // then mail \u0027em out!\n    \n  var ID_email_template \u003d \"0Ai1RU2ey21bfdFRUMGRCS1FYLTBZWTBTLWVYb0xWUVE\"\n  var ID_faculty_list \u003d \"0AkYlsx9j8KGqdHNLdXUtMGJaazMwOUQtMGRyQ0VSYmc\"\n  \n  var faculty_list \u003d SpreadsheetApp.openById(ID_faculty_list) \n  var data \u003d arrayTranspose(faculty_list.getDataRange().getValues())\n  var dates \u003d data[0]\n  var names \u003d data[1]\n  var emails \u003d data[2]\n  \n  var zipped \u003d new Array()\n\n  var ct \u003d 0\n  // loop over faculty list in class schedule spreadsheet\n  for (var i \u003d 0; i \u003c names.length; i++) {\n    \n    if (ct \u003d\u003d faculty.length) { break }\n    // lop over list of faculty names for this exam\n    for (var j \u003d 0; j \u003c faculty.length; j++) {\n      \n      //Logger.log(\u0027names: \u0027+names[i])\n      //Logger.log(\u0027faculty: \u0027+ faculty[j])\n      \n      // if we find a match, zip files and send an email\n      if (names[i] \u003d\u003d faculty[j]) {\n        \n        //Logger.log(\u0027match! ...on \u0027+faculty[j])\n        \n        zipped[j] \u003d Utilities.zip(\n          [\n            Utilities.zip(folder_dict[faculty[j]+\u0027 1\u0027].getFiles(), faculty[j]+\u0027_Q1.zip\u0027), \n            Utilities.zip(folder_dict[faculty[j]+\u0027 2\u0027].getFiles(), faculty[j]+\u0027_Q2.zip\u0027)\n          ], faculty[j]+\u0027.zip\u0027)\n        \n        var name \u003d names[i]\n        var email \u003d emails[i]\n        var attachments \u003d zipped[j]\n        \n        // for testing\n        //email \u003d \u0027reece@g.harvard.edu\u0027\n        \n        sendFilesToFaculty(ID_email_template, name, email, attachments)\n        ct++\n        continue\n      }  \n    }\n  }  \n  \n}\n\n//####################################################################################################\n//####################################################################################################\n\n/// FOR TESTING PURPOSES ONLY\n///\n/// this function gets a list of all the folders in the root directory and prints them to Logger.log\n///\n\nfunction getFolderTree() {\n \n  var root \u003d DocsList.getRootFolder()\n  var first_level \u003d root.getFolders()\n  for (var i \u003d 0; i \u003c first_level.length; i++) {\n    Logger.log(first_level[i].getName()) \n  }\n}"}]}